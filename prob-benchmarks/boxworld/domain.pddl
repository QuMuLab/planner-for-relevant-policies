;; Generated by boxworld generator
;; http://www.cs.rutgers.edu/~jasmuth/boxworld.tar.gz
;; by John Asmuth (jasmuth@cs.rutgers.edu)

(define (domain boxworld)
 (:requirements :typing :equality :disjunctive-preconditions
                :probabilistic-effects :existential-preconditions
                :negative-preconditions
                :universal-preconditions)
 (:types city box truck plane)
 (:predicates (box-at-city ?b - box ?c - city)
              (truck-at-city ?t - truck ?c - city)
              (box-on-truck ?b - box ?t - truck)
              (plane-at-city ?p - plane ?c - city)
              (box-on-plane ?b - box ?p - plane)
              (destination ?b - box ?dst - city)
              (can-drive ?src - city ?dst - city)
              (wrong-drive1 ?src - city ?wrongdst - city)
              (wrong-drive2 ?src - city ?wrongdst - city)
              (wrong-drive3 ?src - city ?wrongdst - city)
              (can-fly ?src - city ?dst - city))
 
              
 (:action load-box-on-truck-in-city
 
  :parameters (?b - box ?t - truck ?c - city)
  
  :precondition (and (box-at-city ?b ?c)
                     (not (destination ?b ?c))
                     (truck-at-city ?t ?c))
                     
  :effect (and (box-on-truck ?b ?t)
               (not (box-at-city ?b ?c)))
 )
 
 
 (:action unload-box-from-truck-in-city
 
  :parameters (?b - box ?t - truck ?c - city)
  
  :precondition (and (box-on-truck ?b ?t)
                     (truck-at-city ?t ?c))
                          
  :effect (and (box-at-city ?b ?c)
               (not (box-on-truck ?b ?t)))
               
 )
 
 
 (:action load-box-on-plane-in-city
 
  :parameters (?b - box ?p - plane ?c - city)
  
  :precondition (and (box-at-city ?b ?c)
                     (not (destination ?b ?c))
                     (plane-at-city ?p ?c)
                )
                
  :effect (and (box-on-plane ?b ?p)
               (not (box-at-city ?b ?c)))
               
 )
 
 
 (:action unload-box-from-plane-in-city
 
  :parameters (?b - box ?p - plane ?c - city)
  
  :precondition (and (box-on-plane ?b ?p)
                     (plane-at-city ?p ?c))
                     
  :effect (and (box-at-city ?b ?c)
               (not (box-on-plane ?b ?p)))
               
 )
 
 
 (:action drive-truck
 
  :parameters (?t - truck ?src - city ?dst - city ?wd1 - city ?wd2 - city ?wd3 - city)
  
  :precondition (and (truck-at-city ?t ?src)
                     (can-drive ?src ?dst)
                     (wrong-drive1 ?src ?wd1)
                     (wrong-drive2 ?src ?wd2)
                     (wrong-drive3 ?src ?wd3))
  :effect (and 
               
               (not (truck-at-city ?t ?src))
               
               (probabilistic
               
                    0.2 (probabilistic
                      1/3 (truck-at-city ?t ?wd1)
                      1/3 (truck-at-city ?t ?wd2)
                      1/3 (truck-at-city ?t ?wd3))
                      
                    0.8 (truck-at-city ?t ?dst)
               )
          )
 )
 
 
 (:action fly-plane
 
  :parameters (?p - plane ?src - city ?dst - city)
  
  :precondition (and (plane-at-city ?p ?src)
                     (can-fly ?src ?dst))
                     
  :effect (and (not (plane-at-city ?p ?src))
               (plane-at-city ?p ?dst))
          
 )
)
